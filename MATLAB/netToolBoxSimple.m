% Solve a Pattern Recognition Problem with a Neural Network
% Script generated by Neural Pattern Recognition app
% Created 19-Nov-2015 18:31:13

nHidden= [1 10 50];% Numero de nodos escondidos do experimento
lr =  [0.01 0.1 0.9]; %Taxas de aprendizado do experimento

cm=zeros(2,2);

%for n=1:3
%    for m=1:3
        s=sprintf('../Results/errorMLP.txt');
        fileID = fopen(s,'w');
        
        for j=0:9 %Reapeat k-fold 10x
            
            stVal=1;
            stTest=96;
            foldSize=95;
            stTrng2=stTest+foldSize;
            nSample=950;
            s=sprintf('../data_kfold/MLP/MLP%i.csv', j);
            data= csvread(s)';    % Reading file of training, validation and test
            
            for i=0:9
                
                %k-fold 10 cases
                if i==0
                    [trainInd,valInd,testInd] = divideind(nSample,stTrng2:nSample,stVal:(stVal+foldSize-1),stTest:(stTest+foldSize-1));
                    stVal=stVal+foldSize;
                    stTest=stTest+foldSize;
                    stTrng2=stTest+foldSize;
                    stTrng1=1;
                elseif (i==1 || i==2 ||i==3 ||i==4 ||i==5 ||i==6 ||i==7)
                    [trainInd,valInd,testInd] = divideind(nSample,[stTrng1:(stVal-1),stTrng2:nSample],stVal:(stVal+foldSize-1),stTest:(stTest+foldSize-1));
                    stVal=stVal+foldSize;
                    stTest=stTest+foldSize;
                    stTrng2=stTest+foldSize;
                    stTrng1=1;
                else
                    [trainInd,valInd,testInd] = divideind(nSample,stTrng1:(stVal-1),stVal:(stVal+foldSize-1),stTest:(stTest+foldSize-1));
                    stVal=stVal+foldSize;
                    stTest=1;
                    stTrng1=foldSize+1;
                end
                
                nInput=950;
                nAtributes=9;
                
                x = data(1:nAtributes, 1:nInput);
                t = data((nAtributes + 1):11, 1:nInput);
                
                
                % Choose a Training Function
                % For a list of all training functions type: help nntrain
                % 'trainlm' is usually fastest.
                % 'trainbr' takes longer but may be better for challenging problems.
                % 'trainscg' uses less memory. Suitable in low memory situations.
                trainFcn = 'traingd'; 
                
                % Create a Pattern Recognition Network
                hiddenLayerSize = nHidden(2);
                net = patternnet(hiddenLayerSize,trainFcn);
                net.trainParam.lr=lr(1); %Taxa de aprendizado
                net.trainParam.epochs= 50000; %Number max of Epochs
                %net.trainParam.max_fail=5;
                %net.layers{1}.transferFcn = 'logsig';
                %net.layers{2}.transferFcn = 'tansig';
                
                
                % Setup Division of Data for Training, Validation, Testing
                net.divideFcn = 'divideind';
                net.divideMode = 'sample';  % Divide up every sample
                
                net.divideParam.trainInd = trainInd;
                net.divideParam.valInd = valInd;
                net.divideParam.testInd = testInd;
                % Train the Network
                [net,tr] = train(net,x,t);
                
                % Test the Network
                tInput=x(:,tr.testInd);
                tLabel=t(:,tr.testInd);
                
                y = net(tInput);
                %e = gsubtract(t,y);
                %performance = perform(net,t,y)
                tind = vec2ind(tLabel);
                yind = vec2ind(y);
                percentErrors = sum(tind ~= yind)/numel(tind);
                fprintf(fileID,'%f\n',percentErrors);
                
                disp(percentErrors);
                
                % View the Network
                %view(net)
                
                % Plots
                % Uncomment these lines to enable various plots.
                %figure, plotperform(tr)
                %figure, plottrainstate(tr)
                %figure, ploterrhist(e)
                %figure, plotconfusion(tLabel,y)
                [c,cm2,ind,per] = confusion(tLabel,y);
                cm= cm+cm2;
                figure, plotroc(t(tr.testInd),y)
                disp(cm);
               
                
            end
        end
        fclose(fileID);
%    end
%end
